@*
	The MIT License(MIT)

	Copyright(c) 2021 Alberto Rodriguez Orozco & LiveCharts Contributors

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*@

@using LiveChartsCore.Drawing
@using LiveChartsCore.Kernel
@using LiveChartsCore.Kernel.Sketches
@using LiveChartsCore.Measure
@using LiveChartsCore.SkiaSharpView.Drawing
@using System.Collections.Specialized
@using System.ComponentModel
@using System.Collections.ObjectModel

@inherits Chart
@implements ICartesianChartView<SkiaSharpDrawingContext>

@code {
	private CollectionDeepObserver<ISeries>? _seriesObserver;
	private CollectionDeepObserver<ICartesianAxis>? _xObserver;
	private CollectionDeepObserver<ICartesianAxis>? _yObserver;
	private CollectionDeepObserver<Section<SkiaSharpDrawingContext>>? _sectionsObserverer;
	private IEnumerable<ISeries> _series = new List<ISeries>();
	private IEnumerable<ICartesianAxis> _xAxes = new List<Axis> { new Axis() };
	private IEnumerable<ICartesianAxis> _yAxes = new List<Axis> { new Axis() };
	private IEnumerable<Section<SkiaSharpDrawingContext>> _sections = new List<Section<SkiaSharpDrawingContext>>();
	private DrawMarginFrame<SkiaSharpDrawingContext>? _drawMarginFrame;
	private TooltipFindingStrategy _tooltipFindingStrategy = LiveCharts.CurrentSettings.DefaultTooltipFindingStrategy;

	protected override void OnInitialized()
	{
		_seriesObserver = new CollectionDeepObserver<ISeries>(OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);
		_xObserver = new CollectionDeepObserver<ICartesianAxis>(OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);
		_yObserver = new CollectionDeepObserver<ICartesianAxis>(OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);
		_sectionsObserverer = new CollectionDeepObserver<Section<SkiaSharpDrawingContext>>(
			OnDeepCollectionChanged, OnDeepCollectionPropertyChanged, true);

		XAxes = new List<ICartesianAxis>()
		{
			LiveCharts.CurrentSettings.GetProvider<SkiaSharpDrawingContext>().GetDefaultCartesianAxis()
		};
		YAxes = new List<ICartesianAxis>()
		{
			LiveCharts.CurrentSettings.GetProvider<SkiaSharpDrawingContext>().GetDefaultCartesianAxis()
		};
		Series = new ObservableCollection<ISeries>();

		// ToDo: pointer events
		//var c = Controls[0].Controls[0];

		//c.MouseWheel += OnMouseWheel;
		//c.MouseDown += OnMouseDown;
		//c.MouseUp += OnMouseUp;
	}

	CartesianChart<SkiaSharpDrawingContext> ICartesianChartView<SkiaSharpDrawingContext>.Core =>
		core is null ? throw new Exception("core not found") : (CartesianChart<SkiaSharpDrawingContext>)core;

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.Series" />
	public IEnumerable<ISeries> Series
	{
		get => _series;
		set
		{
			_seriesObserver?.Dispose(_series);
			_seriesObserver?.Initialize(value);
			_series = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.XAxes" />
	public IEnumerable<ICartesianAxis> XAxes
	{
		get => _xAxes;
		set
		{
			_xObserver?.Dispose(_xAxes);
			_xObserver?.Initialize(value);
			_xAxes = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.YAxes" />
	public IEnumerable<ICartesianAxis> YAxes
	{
		get => _yAxes;
		set
		{
			_yObserver?.Dispose(_yAxes);
			_yObserver?.Initialize(value);
			_yAxes = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.Sections" />
	public IEnumerable<Section<SkiaSharpDrawingContext>> Sections
	{
		get => _sections;
		set
		{
			_sectionsObserverer?.Dispose(_sections);
			_sectionsObserverer?.Initialize(value);
			_sections = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.DrawMarginFrame" />
	public DrawMarginFrame<SkiaSharpDrawingContext>? DrawMarginFrame
	{
		get => _drawMarginFrame;
		set
		{
			_drawMarginFrame = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.ZoomMode" />
	public ZoomAndPanMode ZoomMode { get; set; } = LiveCharts.CurrentSettings.DefaultZoomMode;

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.ZoomingSpeed" />
	public double ZoomingSpeed { get; set; } = LiveCharts.CurrentSettings.DefaultZoomSpeed;

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.TooltipFindingStrategy" />
	public TooltipFindingStrategy TooltipFindingStrategy
	{
		get => _tooltipFindingStrategy;
		set
		{
			_tooltipFindingStrategy = value;
			OnPropertyChanged();
		}
	}

	/// <inheritdoc cref="ICartesianChartView{TDrawingContext}.ScaleUIPoint(LvcPoint, int, int)" />
	public double[] ScaleUIPoint(LvcPoint point, int xAxisIndex = 0, int yAxisIndex = 0)
	{
		if (core is null) throw new Exception("core not found");
		var cartesianCore = (CartesianChart<SkiaSharpDrawingContext>)core;
		return cartesianCore.ScaleUIPoint(point, xAxisIndex, yAxisIndex);
	}

	protected override void InitializeCore()
	{
		if (motionCanvas is null) throw new Exception("MotionCanvas component was not found");

		core = new CartesianChart<SkiaSharpDrawingContext>(this, LiveChartsSkiaSharp.DefaultPlatformBuilder, motionCanvas.CanvasCore);
		if (((IChartView)this).DesignerMode) return;
		core.Update();
	}

	private void OnDeepCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
	{
		if (sender is IStopNPC stop && !stop.IsNotifyingChanges) return;
		OnPropertyChanged();
	}

	private void OnDeepCollectionPropertyChanged(object? sender, PropertyChangedEventArgs e)
	{
		if (sender is IStopNPC stop && !stop.IsNotifyingChanges) return;
		OnPropertyChanged();
	}

}
